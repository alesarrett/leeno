<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="xmlsix_io" script:language="StarBasic">Sub Main
cXmlFile = &quot;/media/giuserpe/PRIVATO/LeenO/elenchi/Bolzano/altri_formati/prova.xml&quot;
cXmlUrl = ConvertToURL( cXmlFile )
ReadXmlFromUrl( cXmlUrl )
End Sub
rem ----------------------------------------------------------------------
&apos; This routine demonstrates how to use the Universal Content Broker&apos;s
&apos; SimpleFileAccess to read from a local file.
Sub ReadXmlFromUrl( cUrl )
oSFA = createUnoService( &quot;com.sun.star.ucb.SimpleFileAccess&quot; )
&apos; Open input file.
oInputStream = oSFA.openFileRead( cUrl )
xray oInputStream 
ReadXmlFromInputStream( oInputStream )
oInputStream.closeInput()
End Sub
rem ----------------------------------------------------------------------
Sub ReadXmlFromInputStream( oInputStream )
&apos; Create a Sax Xml parser.
oSaxParser = createUnoService( &quot;com.sun.star.xml.sax.Parser&quot; )
&apos; Create a document event handler object.
&apos; As methods of this object are called, Basic arranges
&apos; for global routines (see below) to be called.
oDocEventsHandler = CreateDocumentHandler()
&apos; Plug our event handler into the parser.
&apos; As the parser reads an Xml document, it calls methods
&apos; of the object, and hence global subroutines below
&apos; to notify them of what it is seeing within the Xml document.
oSaxParser.setDocumentHandler( oDocEventsHandler )
&apos; Create an InputSource structure.
oInputSource = createUnoStruct( &quot;com.sun.star.xml.sax.InputSource&quot; )
With oInputSource
.aInputStream = oInputStream
&apos; plug in the input stream
End With
&apos; Now parse the document.
&apos; This reads in the entire document.
&apos; Methods of the oDocEventsHandler object are called as
&apos; the document is scanned.
oSaxParser.parseStream( oInputSource )
End Sub
rem ----------------------------------------------------------------------
&apos;==================================================
&apos; Xml Sax document handler.
&apos;==================================================
&apos; Global variables used by our document handler.
&apos;
&apos; Once the Sax parser has given us a document locator,
&apos; the glLocatorSet variable is set to True,
&apos; and the goLocator contains the locator object.
&apos;
&apos; The methods of the locator object has cool methods
&apos; which can tell you where within the current Xml document
&apos; being parsed that the current Sax event occured.
&apos; The locator object implements com.sun.star.xml.sax.XLocator.
&apos;
Private goLocator As Object
Private glLocatorSet As Boolean
&apos; This creates an object which implements the interface
&apos; com.sun.star.xml.sax.XDocumentHandler.
&apos; The doucment handler is returned as the function result.
Function CreateDocumentHandler()
&apos; Use the CreateUnoListener function of Basic.
&apos; Basic creates and returns an object that implements a
&apos; particular interface.
&apos; When methods of that object are called,
&apos; Basic will call global Basic functions whose names are the same
&apos; as the methods, but prefixed with a certian prefix.
oDocHandler = CreateUnoListener( &quot;DocHandler_&quot;, &quot;com.sun.star.xml.sax.XDocumentHandler&quot; )
glLocatorSet = False
CreateDocumentHandler() = oDocHandler
End Function
rem ----------------------------------------------------------------------
&apos;==================================================
&apos; Methods of our document handler call these
&apos; global functions.
&apos; These methods look strangely similar to
&apos; a SAX event handler. ;-)
&apos; These global routines are called by the Sax parser
&apos; as it reads in an XML document.
&apos; These subroutines must be named with a prefix that is
&apos; followed by the event name of the
&apos; com.sun.star.xml.sax.XDocumentHandler interface.
&apos;==================================================
Sub DocHandler_startDocument()
&apos; Print &quot;Start document&quot;
End Sub
rem ----------------------------------------------------------------------
Sub DocHandler_endDocument()
&apos; Print &quot;End document&quot;
End Sub
rem ----------------------------------------------------------------------
Sub DocHandler_startElement( cName$, oAttr As com.sun.star.xml.sax.XAttributeList )
&apos;Print &quot;Start element&quot;, cName
End Sub
rem ----------------------------------------------------------------------
Sub DocHandler_endElement( cName As String )
&apos; Print &quot;End element&quot;, cName
End Sub
rem ----------------------------------------------------------------------
Sub DocHandler_characters( cChars As String )
End Sub
rem ----------------------------------------------------------------------
Sub DocHandler_ignorableWhitespace( cWhitespace As String )
End Sub
rem ----------------------------------------------------------------------
Sub DocHandler_processingInstruction( cTarget As String, cData As String )
End Sub
rem ----------------------------------------------------------------------
Sub DocHandler_setDocumentLocator( oLocator As com.sun.star.xml.sax.XLocator )
&apos; Save the locator object in a global variable.
&apos; The locator object has valuable methods that we can
&apos; call to determine
goLocator = oLocator
glLocatorSet = True
End Sub
rem ----------------------------------------------------------------------
rem ----------------------------------------------------------------------
rem ----------------------------------------------------------------------
REM  *****  BASIC  *****

Sub six_import

rem -------------------------------------------------------
rem - Init import URL
dim xmlurl as string
xmlurl = &quot;W:\_dwg\ULTIMUSFREE\elenchi\Bolzano\altri_formati\XSLT_ESEMPI\dati.xml&quot;
xmlurl = ConvertToURL( xmlurl )
rem -------------------------------------------------------
rem - Import payments
dim properties(0) as new com.sun.star.beans.PropertyValue
properties(0).Name = &quot;FilterName&quot;
properties(0).Value = &quot;aa&quot;

dim doc As Object
doc = StarDesktop.loadComponentFromURL(xmlurl, &quot;_blank&quot;, 0, properties())

End Sub
rem -------------------------------------------------------
rem -------------------------------------------------------

Sub six_out
rem - Get access to the document
dim document as object
document = ThisComponent
rem -------------------------------------------------------
rem - Init export URL
dim xmlurl as string
xmlurl = &quot;file:///C:/Temp/payments-export.xml&quot;

rem -------------------------------------------------------
rem - Export payments
dim properties(5) as new com.sun.star.beans.PropertyValue
properties(0).Name = &quot;FilterName&quot;
properties(0).Value = &quot;aa&quot;
properties(1).Name = &quot;URL&quot;
properties(1).Value = &quot;2008-01-01;hol.sten&quot;
rem properties(1).Value = xmlurl
document.storeToURL(xmlurl, properties())

End Sub

</script:module>